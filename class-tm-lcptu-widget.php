<?php
// Make sure we aren't being loaded directly!
if ( ! defined( 'ABSPATH' ) ) {
	exit();
}

/**
 * Class TM_LCPTU_Widget
 * @since 2.0.0
 */
class TM_LCPTU_Widget extends WP_Widget {

	protected $widget_cache = 'tm_lcptu_widget';

	/**
	 * TM_LCPTU_Widget constructor. Sets up our widget.
	 * @since 2.0.0
	 */
	public function __construct() {
		$id_base        = false;
		$name           = _x( 'Latest Custom Post Type Updates', 'widget name', 'latest-custom-post-type-updates' );
		$widget_options = array(
			'description' => _x( 'Displays the most recent posts from builtin and custom post types.', 'widget description', 'latest-custom-post-type-updates' ),
		);

		add_action( 'save_post', array( $this, 'flush_widget_cache' ) );
		add_action( 'deleted_post', array( $this, 'flush_widget_cache' ) );
		add_action( 'switch_theme', array( $this, 'flush_widget_cache' ) );

		parent::__construct( $id_base, $name, $widget_options );
	}

	/**
	 * Outputs our widgets html markup
	 *
	 * @param array $args
	 * @param array $instance
	 *
	 * @since 2.0.0
	 */
	public function widget( $args, $instance ) {
		$cache = array();
		if ( ! $this->is_preview() ) {
			$cache = wp_cache_get( $this->widget_cache, 'widget' );
		}
		if ( ! is_array( $cache ) ) {
			$cache = array();
		}
		if ( ! isset( $args['widget_id'] ) ) {
			$args['widget_id'] = $this->id;
		}
		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];

			return;
		}

		ob_start();
		// TODO: Put widget output here!

		// Save our cache if not a preview, flush ob otherwise.
		if ( ! $this->is_preview() ) {
			$cache[ $args['widget_id'] ] = ob_get_flush();
			wp_cache_set( $this->widget_cache, $cache, 'widget' );
		} else {
			ob_end_flush();
		}
	}

	/**
	 * Sanitizes and saves our widget options
	 *
	 * @param array $new_instance
	 * @param array $old_instance
	 *
	 * @return array
	 * @since 2.0.0
	 */
	public function update( $new_instance, $old_instance ) {
		$instance = array();

		$instance['title']  = strip_tags( $new_instance['title'] );
		$instance['number'] = (int) $new_instance['number'];

		$this->flush_widget_cache();

		return $instance;
	}

	/**
	 * Options for our widget
	 *
	 * @param array $instance
	 *
	 * @return string
	 * @since 2.0.0
	 */
	public function form( $instance ) {
		/**
		 * OPTIONS:
		 * title
		 * numberposts
		 * post_type
		 * orderby
		 * order (ASC/DESC)
		 */
		return parent::form( $instance ); // TODO: Change the autogenerated stub
	}

	/**
	 * Flushes our cached widgets
	 * @since 2.0.0
	 */
	public function flush_widget_cache() {
		wp_cache_delete( $this->widget_cache, 'widget' );
	}

}